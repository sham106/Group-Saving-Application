import React, { createContext, useContext, useReducer, useEffect } from 'react';
import { jwtDecode } from 'jwt-decode';

// Initial state for authentication
const initialState = {
  isAuthenticated: false,
  user: null,
  token: null,
  role: null,
  loading: true
};

// Action types
const AUTH_ACTIONS = {
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  SET_LOADING: 'SET_LOADING'
};

// Authentication reducer
const authReducer = (state, action) => {
  switch (action.type) {
    case AUTH_ACTIONS.LOGIN:
      return {
        ...state,
        isAuthenticated: true,
        user: action.payload.user,
        token: action.payload.token,
        role: action.payload.role,
        loading: false
      };
    case AUTH_ACTIONS.LOGOUT:
      return {
        ...initialState,
        loading: false
      };
    case AUTH_ACTIONS.SET_LOADING:
      return {
        ...state,
        loading: action.payload
      };
    default:
      return state;
  }
};

// Create context
const AuthContext = createContext();

// Auth Provider Component
export const AuthProvider = ({ children }) => {
  const [state, dispatch] = useReducer(authReducer, initialState);

  // Login function (simulated - will be replaced with actual backend call)
  const login = (email, password) => {
    // Simulated login - replace with actual authentication logic
    try {
      // Mock token generation (in real app, this would come from backend)
      const mockToken = generateMockToken(email);
      const decodedToken = jwtDecode(mockToken);

      dispatch({
        type: AUTH_ACTIONS.LOGIN,
        payload: {
          user: {
            id: decodedToken.userId,
            email: email,
            name: decodedToken.name
          },
          token: mockToken,
          role: decodedToken.role
        }
      });

      // Store token in localStorage
      localStorage.setItem('token', mockToken);
    } catch (error) {
      console.error('Login failed', error);
      // Handle login error
    }
  };

  // Logout function
  const logout = () => {
    localStorage.removeItem('token');
    dispatch({ type: AUTH_ACTIONS.LOGOUT });
  };

  // Check token on app load
  useEffect(() => {
    const token = localStorage.getItem('token');
    
    if (token) {
      try {
        const decodedToken = jwtDecode(token);
        
        // Check token expiration
        if (decodedToken.exp * 1000 > Date.now()) {
          dispatch({
            type: AUTH_ACTIONS.LOGIN,
            payload: {
              user: {
                id: decodedToken.userId,
                email: decodedToken.email,
                name: decodedToken.name
              },
              token: token,
              role: decodedToken.role
            }
          });
        } else {
          logout();
        }
      } catch (error) {
        logout();
      }
    } else {
      dispatch({ 
        type: AUTH_ACTIONS.SET_LOADING, 
        payload: false 
      });
    }
  }, []);

  // Utility function to generate mock token (for demonstration)
  const generateMockToken = (email) => {
    // In a real application, this would be generated by the backend
    const payload = {
      userId: Math.random().toString(36).substr(2, 9),
      email: email,
      name: email.split('@')[0],
      role: email.includes('admin') ? 'admin' : 'member',
      exp: Math.floor(Date.now() / 1000) + 60 * 60 * 24 // 24 hours from now
    };

    // This is a mock implementation. In a real app, this would be a proper JWT signing process
    return btoa(JSON.stringify(payload));
  };

  // Signup function (simulated)
  const signup = (name, email, password) => {
    try {
      // In a real app, this would be an API call to create a user
      const mockToken = generateMockToken(email);
      const decodedToken = jwtDecode(mockToken);

      dispatch({
        type: AUTH_ACTIONS.LOGIN,
        payload: {
          user: {
            id: decodedToken.userId,
            email: email,
            name: name
          },
          token: mockToken,
          role: decodedToken.role
        }
      });

      localStorage.setItem('token', mockToken);
    } catch (error) {
      console.error('Signup failed', error);
      // Handle signup error
    }
  };

  return (
    <AuthContext.Provider 
      value={{ 
        ...state, 
        login, 
        logout, 
        signup,
        isAdmin: state.role === 'admin',
        isMember: state.role === 'member'
      }}
    >
      {!state.loading && children}
    </AuthContext.Provider>
  );
};

// Custom hook for using auth context
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};